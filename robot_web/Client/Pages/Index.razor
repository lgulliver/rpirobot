@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="container">
    <div class="row">
        <div class="col col-md-8">
            <div class="embed-responsive embed-responsive-16by9">
                <iframe src="https://obs.ninja/?view=robot&scene&room=bcsdemo&password=BCSDemo1234"
                    class="embed-responsive-item" />
            </div>
        </div>
        <div class="col col-md-4" style="max-height: 380px; overflow-y: scroll;" id="messagesDiv">
            <ul id="messagesList">
                @foreach (var message in messages)
                {
                    <li>@message</li>
                }
            </ul>
        </div>
    </div>
</div>

<div class="form-group row">
    <label>
        Servo 1 (@servo1):
    </label>
     <MatTextField @bind-Value="@servo1" Label="Value"></MatTextField>
    <MatSlider Value="@servo1" Immediate="true" Step="1" EnableStep="true" ValueMin="0" ValueMax="180"
        Markers="true" Pin="true" TValue="int" Discrete="true" ValueChanged="@UpdateServo1Value"></MatSlider>
</div>

<div class="form-group row">
    <label>
        Servo 2 (@servo2):
    </label>
    <MatSlider Value="@servo2" Immediate="true" Step="1" EnableStep="true" ValueMin="0" ValueMax="180"
        Markers="true" Pin="true" TValue="int" Discrete="true" ValueChanged="@UpdateServo2Value"></MatSlider>
</div>

<div class="form-group row">
    <label>
        Servo 3 (@servo3):
    </label>
    <MatSlider Value="@servo3" Immediate="true" Step="1" EnableStep="true" ValueMin="0" ValueMax="180"
        Markers="true" Pin="true" TValue="int" Discrete="true" ValueChanged="@UpdateServo3Value"></MatSlider>
</div>


<button @onclick="Send" disabled="@(!IsConnected)">Send</button>


@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
            {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);

            switch (user)
            {
                case "servo1":
                    servo1 = Int32.Parse(message);
                    StateHasChanged();
                    break;      
                case "servo2":
                    servo2 = Int32.Parse(message);
                    StateHasChanged();
                    break;   
                case "servo3":
                    servo3 = Int32.Parse(message);
                    StateHasChanged();
                    break;                                                                               
                default:
                    break;
            }
        });

        StateHasChanged();

        await hubConnection.StartAsync();
    }

    Task Send() =>
        hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    public int servo1 { get; set; } = 90;

    public int servo2 { get; set; } = 90;

    public int servo3 { get; set; } = 90;

    private void UpdateServo1Value(int val) {
        servo1 = val;
        StateHasChanged();
        hubConnection.SendAsync("SendMessage", "servo1", val.ToString());
    }

    private void UpdateServo2Value(int val) {
        servo2 = val;
        StateHasChanged();
        hubConnection.SendAsync("SendMessage", "servo2", val.ToString());
    }

    private void UpdateServo3Value(int val) {
        servo3 = val;
        StateHasChanged();
        hubConnection.SendAsync("SendMessage", "servo3", val.ToString());
    }
} 
